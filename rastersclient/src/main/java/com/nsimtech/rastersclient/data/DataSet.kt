/**
* Rasters API
* No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
*
* OpenAPI spec version: v2
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package com.nsimtech.rastersclient.data


import com.nsimtech.rastersclient.data.Serializer.DatasetStatusSerializer
import com.nsimtech.rastersclient.data.Serializer.DateSerializer
import com.nsimtech.rastersclient.data.Serializer.UUIDSerializer
import com.squareup.moshi.Json
import kotlinx.serialization.ContextualSerialization
import kotlinx.serialization.Serializable
import java.util.*

/**
 * 
 * @param id 
 * @param type 
 * @param status 
 * @param beginDate 
 * @param endDate 
 * @param nbFiles 
 * @param size 
 * @param dataUploaded 
 * @param &#x60;data&#x60; 
 * @param error 
 * @param metadata 
 * @param processingType 
 * @param isRaster 
 */
@Serializable
data class DataSet (
    val type: kotlin.String? = null,

    @Serializable(with = DateSerializer::class)
    val beginDate: Date? = null,

    @Serializable(with = DateSerializer::class)
    val endDate: Date? = null,

    val nbFiles: kotlin.Int? = null,
    val size: kotlin.Double? = null,
    val dataUploaded: kotlin.String? = null,
    val `data`: kotlin.String? = null,
    val error: kotlin.String? = null,
    val metadata: kotlin.String? = null,
    val processingType: kotlin.Int? = null,
    val isRaster: kotlin.Boolean? = null,

    @Serializable(with = UUIDSerializer::class)
    val id: java.util.UUID? = null,

    @Serializable(with = DatasetStatusSerializer::class)
    val status: DataSet.Status? = null
) {

    /**
    * 
    * Values: error,noData,dataReceived,inAcquisition,inProcessing,dataCompleted
    */
    enum class Status(val value: kotlin.String){

        @Json(name = "Error") Error("Error"),

        @Json(name = "NoData") NoData("NoData"),

        @Json(name = "DataReceived") DataReceived("DataReceived"),

        @Json(name = "InAcquisition") InAcquisition("InAcquisition"),

        @Json(name = "InProcessing") InProcessing("InProcessing"),

        @Json(name = "DataCompleted") DataCompleted("DataCompleted");
    
    }

}

